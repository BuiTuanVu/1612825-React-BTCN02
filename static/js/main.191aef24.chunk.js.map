{"version":3,"sources":["logo.svg","Game.js","serviceWorker.js","index.js"],"names":["module","exports","Square","props","className","data-pro","value","onClick","Board","i","this","squares","sizeOfBoard","Math","sqrt","length","board","Array","fill","j","squareKey","push","key","renderSquare","renderBoard","React","Component","calculateWinner","size","index","Game","state","xIsNext","setState","slice","status","winner","id","type","restartClick","handleClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.191aef24.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './Game.css';\n\n// class Square extends React.Component {\n//   render() {\n//     return (\n//       <button className=\"square\" onClick={this.props.onClick}>{this.props.value}</button>\n//     );\n//   }\n// }\nfunction Square(props) {\n  return(\n    <button className=\"square\" data-pro={props.value} onClick={props.onClick}>{props.value}</button>\n  );\n}\n\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square className=\"square\" value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />\n  }\n\n  renderBoard() {\n    const sizeOfBoard = Math.sqrt(this.props.squares.length);\n    const board = Array(sizeOfBoard).fill(null);\n    for (let i = 0; i < sizeOfBoard; i++) {\n      const squares = Array(sizeOfBoard).fill(null);\n      for (let j = 0; j < sizeOfBoard; j++) {\n        var squareKey = i * sizeOfBoard + j;\n        squares.push(<span key={squareKey}>{this.renderSquare(squareKey)}</span>);\n      }\n      board.push(<div key={i}>{squares}</div>);\n    }\n    return board;\n  }\n\n  render() {\n    return (\n      <div>\n\n        <div>{this.renderBoard()}</div>\n      </div>\n    );\n  }\n}\n\n\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(400).fill(null),\n      xIsNext: true,\n\n    };\n  }\n\n  restartClick() {\n    const squares = Array(400).fill(null);\n    this.setState({squares: squares, xIsNext: true});\n    \n  }\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n\n    });\n\n  }\n\n  render() {\n    const squares = this.state.squares.slice();\n    const winner = calculateWinner(squares);\n    let status;\n    if (winner) {\n     \n      status = \"Winner is: \" + winner ;\n      \n    } else {\n      \n      status = \"Next player is: \" + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div>\n        <div className=\"row\">\n          <div className=\"col-4 status\" id=\"status\">\n              {status}\n          </div>\n          <div className=\"col-4\">\n          <button className=\"btn btn-sm btn-outline-success\" type=\"button\" onClick={() => this.restartClick()}>Restart</button>\n          </div>\n\n        </div>\n        <div className=\"game\"><Board squares={squares} onClick={i => this.handleClick(i)} /></div>\n\n      </div>\n    );\n  }\n}\n\n\n\nfunction calculateWinner(squares) {\n  const size = Math.sqrt(squares.length);\n  const numOfElement = 5; //The number of same element to win\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < size; j++) {\n      const index = i * size + j;\n\n\n      if (((index < (i + 1) * size - 5) && (squares[index - 1] === null || squares[index + 5] === null) && squares[index] && squares[index] === squares[index + 1] && squares[index] === squares[index + 2] && squares[index] === squares[index+3] && squares[index]===squares[index+4])\n        || ((squares[index - size] === null || squares[index + 5 * size] === null) && squares[index] && squares[index] === squares[index + size * 1] && squares[index] === squares[index + size * 2] && squares[index] === squares[index + size * 3] && squares[index] === squares[index + size * 4])\n        || ((squares[index - size * 1 - 1] === null || squares[index + size * 5 + 5] === null) && squares[index] && squares[index] === squares[index + size * 1 + 1] && squares[index] === squares[index + size * 2 + 2] && squares[index] === squares[index + size * 3 + 3] && squares[index] === squares[index + size * 4 + 4])\n        || ((squares[index - size * 1 + 1] === null || squares[index + size * 5 - 5] === null) && squares[index] && squares[index] === squares[index + size * 1 - 1] && squares[index] === squares[index + size * 2 - 2] && squares[index] === squares[index + size * 3 - 3] && squares[index] === squares[index + size * 4 - 4])) {\n        return squares[index];\n      }\n\n    }\n\n  }\n  return null;\n}\n\n\n\n\n\nexport default Game;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './Game';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}